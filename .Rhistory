dplyr::distinct() |>
dplyr::filter(row == substr(x$input, 1, 4)) |>
dplyr::select(-part)
ROWBASE |>
dplyr::filter(axis == "5", row == substr(x$input, 1, 4))
ROWBASE |>
dplyr::filter(axis == "5", row == substr(x$input, 1, 4)) |>
dplyr::distinct()
ROWBASE |>
dplyr::filter(axis == "5", row == substr(x$input, 1, 4)) |>
dplyr::distinct() |>
dplyr::select(-part)
# Filter to body part.
approach <- ROWBASE |>
dplyr::filter(axis == "5", row == substr(x$input, 1, 4)) |>
dplyr::distinct() |>
dplyr::select(-part)
x
as.character(unique(x$part$rowid))
approach
dplyr::filter(approach, value == substr(x$input, 5, 5))
x$approach <- dplyr::filter(approach, value == substr(x$input, 5, 5))
x
ROWBASE
ROWBASE |>
dplyr::filter(axis == "6", row == substr(x$input, 1, 4)) |>
dplyr::distinct() |>
dplyr::select(-part)
# Filter to body part.
device <- ROWBASE |>
dplyr::filter(axis == "6", row == substr(x$input, 1, 4)) |>
dplyr::distinct() |>
dplyr::select(-part)
dplyr::filter(device, value == substr(x$input, 6, 6))
x$device <- dplyr::filter(device, value == substr(x$input, 6, 6))
x
gc()
gc()
def <- pins::pin_read(mount_board(), "definitions")
install.packages("lobstr")
def
lobstr::obj_size(def)
lobstr::mem_used()
def |>
count(section, axis_name, sort = TRUE) |>
print(n = 100)
def |>
count(code, axis_code, sort = TRUE) |>
print(n = 100)
def |>
count(section, axis_name, sort = TRUE) |>
print(n = 100)
def |>
filter(is.na(axis_code))
def |>
filter(is.na(axis_code)) |>
count(section, axis_code, sort = TRUE)
def |>
filter(is.na(axis_code)) |>
count(section, axis_code, sort = TRUE)
def |>
filter(is.na(axis_code)) |>
count(section, axis_code, sort = TRUE)
def |>
count(section, axis_name, sort = TRUE) |>
print(n = 100)
def |>
filter(is.na(axis_code))
def |>
count(section, axis_name, sort = TRUE) |>
print(n = 100)
def |>
count(code, axis_code, sort = TRUE) |>
print(n = 100)
def |>
filter(is.na(axis_code)) |>
count(section, axis_code, sort = TRUE)
def |>
count(section, axis_name, sort = TRUE) |>
print(n = 100)
def
def |>
filter(section == "Medical and Surgical")
def |>
filter(section == "Medical and Surgical", is.na(axis_code))
devices()
devices(section = "0")
devtools::load_all(".")
dev <- pins::pin_read(mount_board(), "devices")
dev |>
count(section)
section = NULL,
dev |>
count(system)
systems()
procedural::systems()
devtools::load_all(".")
dev <- pins::pin_read(mount_board(), "devices")
dev
dev |>
count(device)
suppressPackageStartupMessages(library(tidyverse))
dev |>
count(device)
devtools::load_all(".")
devices(system = "2")
def <- pins::pin_read(mount_board(), "definitions")
def |>
filter(section == "Medical and Surgical", is.na(axis_code))
def |>
filter(section == "Medical and Surgical", is.na(axis_code)) |>
count(axis_name, sort = TRUE)
def
def |>
count(section, axis_name, sort = TRUE) |>
print(n = 100)
procedural::systems()
devices()
left_join(devices(), procedural::systems(), by = join_by(system == value))
left_join(devices(), procedural::systems(), by = join_by(section, system == value))
left_join(devices(),
procedural::systems(),
by = join_by(section, system == value)) |>
select(system, label, operation:includes)
def |>
filter(section == "Medical and Surgical", is.na(axis_code)) |>
count(axis_name, sort = TRUE)
def |>
filter(section == "Medical and Surgical", is.na(axis_code))
set <- pins::pin_read(mount_board(), "tables_rows") |>
dplyr::mutate(system = paste0(code_1, code_2),
.before = name_3)
set
set |>
filter(code_1 == "0", code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U"))
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6")
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6") |>
distinct()
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6") |>
select(code_2, label_2, name, code, label) |>
distinct()
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6")
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct()
left_join(devices(),
procedural::systems(),
by = join_by(section, system == value)) |>
select(system, label, operation:includes)
system_device <- left_join(devices(),
procedural::systems(),
by = join_by(section, system == value)) |>
select(system, label, operation:includes)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device, by = join_by(code_2 == system, label_2 == label, code == device))
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system, label_2 == label, code == device),
relationship = "many-to-many")
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system, label_2 == label, code == device),
relationship = "many-to-many") |>
print(n = 200)
install.packages(c("icd.data", "icdpicr"))
def |>
filter(is.na(axis_code)) |>
count(section, axis_code, sort = TRUE)
def |>
count(section, axis_name, sort = TRUE) |>
print(n = 100)
def |>
count(section, axis_name) |>
print(n = 100)
def |>
filter(section == "Medical and Surgical", is.na(axis_code)) |>
count(axis_name, sort = TRUE)
system_device
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system, label_2 == label, code == device),
relationship = "many-to-many") |>
print(n = 200)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system, label_2 == label, code == device),
relationship = "many-to-many") |>
select(system = label_2, operation, device = code, label, device_name) |>
print(n = 200)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system, label_2 == label, code == device),
relationship = "many-to-many") |>
select(system = label_2,
operation,
device = code,
label,
device_name) |>
mutate(equal = if_else(device == operation, TRUE, FALSE)) |>
print(n = 200)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system, label_2 == label, code == device),
relationship = "many-to-many") |>
select(system = label_2,
operation,
device = code,
label,
device_name) |>
mutate(equal = if_else(label == device_name, TRUE, FALSE)) |>
print(n = 200)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system, label_2 == label, code == device),
relationship = "many-to-many") |>
select(system = label_2,
operation,
device = code,
label,
device_name) |>
filter(!is.na(device_name)) |>
mutate(equal = if_else(label == device_name, TRUE, FALSE)) |>
print(n = 200)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system, label_2 == label, code == device),
relationship = "many-to-many") |>
select(system = label_2,
operation,
device = code,
label,
device_name) |>
filter(!is.na(device_name), operation != "All applicable") |>
mutate(equal = if_else(label == device_name, TRUE, FALSE)) |>
print(n = 200)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system, label_2 == label, code == device),
relationship = "many-to-many") |>
select(system = label_2,
operation,
device = code,
label,
device_name) |>
mutate(equal = if_else(label == device_name, TRUE, FALSE)) |>
filter(!is.na(device_name), operation != "All applicable") |>
print(n = 200)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system, label_2 == label, code == device),
relationship = "many-to-many") |>
select(system = label_2,
operation,
device = code,
label,
device_name) |>
mutate(equal = if_else(label == device_name, TRUE, FALSE)) |>
filter(!is.na(device_name), operation != "All applicable", equal == FALSE) |>
print(n = 200)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9, "B", "C", "D", "J", "P", "Q", "R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7, "D", "J", "M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system, label_2 == label, code == device),
relationship = "many-to-many") |>
select(system = label_2,
operation,
device = code,
label,
device_name) |>
mutate(equal = if_else(label == device_name, TRUE, FALSE)) |>
filter(!is.na(device_name),
operation != "All applicable",
equal == FALSE) |>
print(n = 200)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9,
"B", "C", "D",
"J", "P", "Q",
"R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7,
"D", "J",
"M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system,
label_2 == label,
code == device),
relationship = "many-to-many") |>
select(system = label_2,
operation,
device = code,
label,
device_name) |>
mutate(equal = if_else(label == device_name, TRUE, FALSE)) |>
filter(!is.na(device_name),
operation != "All applicable",
equal == FALSE) |>
print(n = 200)
set |>
filter(code_1 == "0",
code_2 %in% c(2:6, 8:9,
"B", "C", "D",
"J", "P", "Q",
"R", "S", "U")) |>
unnest(rows) |>
filter(axis == "6", code %in% c(2, 4:7,
"D", "J",
"M", "P", "S")) |>
select(code_2, label_2, name, code, label) |>
distinct() |>
left_join(system_device,
by = join_by(code_2 == system,
label_2 == label,
code == device),
relationship = "many-to-many") |>
select(system = label_2,
operation,
device = code,
label,
device_name) |>
mutate(equal = if_else(label == device_name, TRUE, FALSE)) |>
filter(!is.na(device_name),
operation != "All applicable",
equal == FALSE) |>
print(n = Inf)
left_join(procedural::devices(),
procedural::systems(),
by = join_by(section,
system == value))
left_join(procedural::devices(),
procedural::systems(),
by = join_by(section,
system == value)) |>
select(system,
label,
operation:includes)
procedural::systems()
procedural::devices()
left_join(procedural::devices(), procedural::systems(),
by = join_by(section, system == value))
library(procedural)
gc()
library(procedural)
file.choose()
usethis::create_from_github("https://github.com/andrewallenbruce/provider.git", destdir = "C:\\Users\\Andrew\\Desktop\\Repositories\\")
library(data.tree)
acme <- Node$new("Acme Inc.")
print(acme)
accounting <- acme$AddChild("Accounting")
print(acme)
software <- accounting$AddChild("New Software")
standards <- accounting$AddChild("New Accounting Standards")
research <- acme$AddChild("Research")
print(acme)
acme$Research
acme
x <- Node$new("0G9000Z")
x
x <- x$AddChild("section")
x <- x$AddChild("system")
x <- x$AddChild("operation")
x
x <- Node$new("0G9000Z")
x
x <- x$AddChild("section")
x
code <- Node$new("0G9000Z")
table <- code$AddChild("table")
code
section <- table$AddChild("section")
system <- table$AddChild("system")
operation <- table$AddChild("operation")
code
x <- "0G9000Z"
input <- Node$new("input")
input <- Node$new("input")
table <- input$AddChild("table")
section <- table$AddChild("section")
system <- table$AddChild("system")
operation <- table$AddChild("operation")
input
input$value <- x
input
x <- "0G9000Z"
input$value <- x
input
input$value <- "0G9000Z"
input
input$table$value <- "0G9"
input
input$table$section$value <- "0"
input
input <- Node$new("input", value = x)
input
input <- Node$new("input", value = "0G9000Z")
input
input <- Node$new("input", value = "0G9000Z")
table <- input$AddChild("table", value = "0G9")
input
print(input)
input <- Node$new("input", value = "0G9000Z")
input$AddChild("table", value = "0G9")
print(input)
input <- Node$new("input", x = "0G9000Z")
input$AddChild("table", x = "0G9")
print(input)
table$AddChild("section", x = 0)
print(input)
input <- Node$new("input", x = "0G9000Z")
input$AddChild("table", x = "0G9")
table$AddChild("section", x = "0")
table$AddChild("system", x = "G")
table$AddChild("operation", x = "9")
print(input, "table", "section", "system", "operation")
