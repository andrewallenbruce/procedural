mutate(action = na_if(action, ""),
codes = na_if(codes, "")) |>
select(-contains(c(".x", ".y"))) |>
select(elemid, letter, mainTerm, action, val_2, val_3, codes) |>
print(n = 100)
lvl_1
left_join(lvl_23, lvl_3, by = join_by("elemid")) |>
unite('letter', letter.x, letter.y, sep = "", na.rm = TRUE) |>
unite('mainTerm', mainTerm.x, mainTerm.y, sep = "", na.rm = TRUE) |>
unite('action', act_2, act_3, sep = "", na.rm = TRUE) |>
unite('codes', x_2, x_3, sep = "", na.rm = TRUE) |>
mutate(action = na_if(action, ""),
codes = na_if(codes, "")) |>
select(-contains(c(".x", ".y"))) |>
select(elemid, letter, mainTerm, action, val_2, val_3, codes) |>
fill(val_2) |>
print(n = 100)
left_join(lvl_23, lvl_3, by = join_by("elemid")) |>
unite('letter', letter.x, letter.y, sep = "", na.rm = TRUE) |>
unite('mainTerm', mainTerm.x, mainTerm.y, sep = "", na.rm = TRUE) |>
unite('action', act_2, act_3, sep = "", na.rm = TRUE) |>
unite('codes', x_2, x_3, sep = "", na.rm = TRUE) |>
mutate(action = na_if(action, ""),
codes = na_if(codes, "")) |>
select(-contains(c(".x", ".y"))) |>
select(elemid, letter, mainTerm, action, val_2, val_3, codes)
lvl_1
pcs_matrix()
pcs_matrix
mat <- pcs_matrix()
mat[c(1),]
mat[1,]
mat[1, drop = FALSE]
mat[1, ,drop = FALSE]
mat[1, 0]
mat[1, '0']
mat[1, 1]
mat[c(1, 1)]
mat[1, 1, drop = FALSE]
mat[1, 1, drop = FALSE] <- 1
mat[1, 1] <- 1
mat
mat[2, 15] <- "G"
mat
mat[2, 15] <- NA
mat[2, 17] <- "G"
mat
mat <- pcs_matrix()
mat[1,1] <- 1
mat[2,17] <- 1
mat
mat[3,11, drop = FALSE]
mat[3,10] <- 1
mat[c(4:6), 1]
mat[c(4:6), 1, drop = FALSE]
mat[c(4:6), 1, drop = FALSE] <- 1
mat[c(4:6), 1] <- 1
mat
mat[7, 34] <- 1
mat
devtools::load_all(".")
pcs_matrix()
devtools::load_all(".")
pcs_matrix()
pcs_matrix()
devtools::load_all(".")
pcs_matrix()
c(0:9, LETTERS[c(1:8, 10:14, 16:26)])
values <- c(0:9, LETTERS[c(1:8, 10:14, 16:26)])
names(values)
names(values) <- c(0:9, LETTERS[c(1:8, 10:14, 16:26)])
values
values <- 1:34
names(values) <- c(0:9, LETTERS[c(1:8, 10:14, 16:26)])
values
values["G"]
unlist(values["G"], use.names = FALSE)
values["G"]
z <- values["G"]
unlist(z, use.names = FALSE)
unname(z)
unname(values[c("G", "A")])
splitter("xy")
devtools::load_all(".")
pcs_matrix("0G9000Z")
devtools::load_all(".")
pcs_matrix("0G9000Z")
devtools::load_all(".")
pcs_matrix("0G9000Z")
pcs_matrix("0G9000Z")
devtools::load_all(".")
pcs_matrix("0G9000Z")
matrixStats::colTabulates()
matrixStats::colTabulates(pcs_matrix("0G9000Z"))
matrixStats::rowCollapse(pcs_matrix("GAQ"))
pcs_matrix("0G9000Z")
Matrix::t(pcs_matrix("0G9000Z"))
pcs_matrix("0G9000Z")
x <- pcs_matrix("0G9000Z")
drawr::draw_matrix(x, highlight_area = x == 1)
drawr::draw_matrix(x, highlight_area = x == 1, show_indices = "all")
drawr::draw_matrix(x, highlight_area = x == 1, show_indices = "cell")
pak::pak("rconsortium/S7")
devtools::load_all(".")
pcs()
pcs("A")
x <- "A"
checks(x)
x <- checks(x)
x <- "A"
.section(x)
s <- .section(x)
s
x$possible["value"]
x
x <- s
x$possible["value"]
delister(x$possible["value"])
x <- "A"
x <- checks(x)
x$possible <- as.data.frame(sections())
x
# Return all sections
if (is.na(x$input)) .cli(x); return(invisible(x))
!is.na(x$input)
x$input %nin% delister(x$possible["value"])
.cli(x)
sections(substr(x$input, 1, 1))
devtools::load_all(".")
x
x <- "A"
.section(x)
x
x <- checks(x)
x$possible <- as.data.frame(sections())
x$input %nin% delister(x$possible["value"]
x$input %nin% delister(x$possible["value"])
x
x$possible
x$input %nin% delister(x$possible["value"])
.clierr(x)
cli::cli_abort(c(
"Invalid {.val {rlang::sym(x$possible$name[[1]])}} Code."))
cli::cli_h2("Select {.val {rlang::sym(x$possible$name[[1]])}}")
cli::cli_li(cl)
glue::glue_data(.x = x$possible, "[{value}] {label}")
cl <- glue::glue_data(.x = x$possible, "[{value}] {label}")
x$possible$name[[1]] == "Section"
cli::cli_h2("Select {.val {rlang::sym(x$possible$name[[1]])}}")
cli::cli_li(cl)
cli::cli_end()
cli::cli_abort(c(
"Invalid {.val {rlang::sym(x$possible$name[[1]])}} Code."
))
!x$input %in% delister(x$possible["value"])
cli::cli_abort(c(
"Invalid {.val {rlang::sym(x$possible$name[[1]])}} Value.",
"i" = cli::cli_li(cl)
))
cli::cli_abort(c(
"Invalid {.val {rlang::sym(x$possible$name[[1]])}} Value.",
"i" = cli::cli_li(cl)
))
cli::cli_abort(c(
"Invalid {.val {rlang::sym(x$possible$name[[1]])}} Value.",
"i" = cli::cli_bullets(cl)
))
devtools::load_all(".")
x
x <- "A"
.section(x)
x <- checks(x)
x$possible <- as.data.frame(sections())
!x$input %in% delister(x$possible["value"])
.clierr(x)
devtools::load_all(".")
.section(x)
x <- "A"
.section(x)
devtools::load_all(".")
.section(x)
devtools::load_all(".")
devtools::load_all(".")
.section(x)
x
.section("x")
x <- .section("A")
x
devtools::load_all(".")
.section("x")
.section("A")
devtools::load_all(".")
.section("A")
devtools::load_all(".")
.section("A")
pcs("A")
devtools::load_all(".")
pcs("A")
devtools::load_all(".")
pcs("A")
.section("A")
install.packages("data.table")
devtools::load_all(".")
pcs()
pcs("0")
pcs("01")
pcs("0")
pcs("01")
devtools::load_all(".")
pcs("01")
x <- "01"
x <- checks(x)
x
x$possible <- as.data.frame(sections())
x$input[1]
splitter(x$input)
splitter(x$input)[1]
devtools::load_all(".")
pcs("01")
pcs()
pcs("Y")
devtools::load_all(".")
pcs("Y")
devtools::load_all(".")
pcs("0")
pcs("0Z")
devtools::load_all(".")
pcs("0Z")
devtools::load_all(".")
pcs("0Z")
pcs("0")
pcs("0Z")
pcs()
pcs("Y")
x
substr(x$input, 2, 2)
devtools::load_all(".")
pcs()
pcs("Y")
devtools::load_all(".")
pcs()
pcs("X")
pcs("X1")
devtools::load_all(".")
pcs("X1")
pcs("X0")
pcs("X01")
pcs("X0Z")
pcs("X0Z1")
pcs("X0Z0")
pcs("X0Z01")
pcs("X0Z0X")
pcs("X0Z0X2")
pcs("X0Z0X1")
pcs("X0Z0X10")
pcs("X0Z0X18")
order(search = "X0Z0X18")
devtools::load_all(".")
order(search = "X0Z0X18")
pcs("X0Z0X18")
pcs("0G9")
x <- pcs("0G9")
x
usethis::use_data_raw("index2")
library(procedural)
devtools::load_all(".")
pcs()
pcs("Y")
devtools::load_all(".")
pcs("Y")
pcs("QWERTYUI")
devtools::load_all(".")
pcs("QWERTYUI")
order("02103D4")
procedural::order("02103D4")
procedural::order(search = "02103D4")
pins::pin_read(mount_board(), "tables_order")
devtools::load_all(".")
pins::pin_read(mount_board(), "tables_order")
devtools::load_all(".")
order(search = "Olfactory", col = "description_code")
devtools::load_all(".")
order()
code_range("0G9000Z", "0G9100Z")
pins::pin_read(mount_board(), "index_v2") |>
tidyr::unite("term", term, subterm, sep = ", ", na.rm = TRUE) |>
dplyr::mutate(id = dplyr::row_number(), .before = 1) |>
dplyr::rename(index = letter,
type = verb) |>
dplyr::select(-term_id)
pins::pin_read(mount_board(), "devices")
pins::pin_read(mount_board(), "includes")
devtools::load_all(".")
definitions(section = "0", axis = "3", search = "Drainage")
devtools::load_all(".")
devtools::load_all(".")
definitions(section = "0", axis = "3", search = "Drainage")
definitions(section = "0", axis = "3")
library(tidyverse)
definitions()
definitions() |> count(section, axis) |> print(n = Inf)
definitions() |> count(axis) |> print(n = Inf)
definitions(section = "G") |> print(n = Inf)
definitions(section = "G", axis = "4") |> print(n = Inf)
definitions() |> count(section) |> print(n = Inf)
definitions() |>
count(section, axis) |>
print(n = Inf)
definitions(section = "0")
pcs("0")
pcs("00")
select <- pins::pin_read(mount_board(), "tables_rows")
select
definitions() |>
count(section, axis) |>
print(n = Inf)
definitions(axis = "3")
select |>
filter(name_3 = "Operation")
select |>
filter(name_3 == "Operation")
definitions(axis = "3") |>
# count(section, axis) |>
print(n = Inf)
select |>
select(code_1, name_3, code_3, label_3)
select |>
select(code_1, name_3, code_3, label_3) |>
distinct()
definitions(axis = "3") |>
# count(section, axis) |>
print(n = Inf)
select |>
select(
section = code_1,
name = name_3,
value = code_3,
label = label_3) |>
distinct()
definitions(axis = "3") |>
# count(section, axis) |>
print(n = Inf)
axis3 <- select |>
select(
section = code_1,
name = name_3,
value = code_3,
label = label_3) |>
distinct()
left_join(definitions(axis = "3"), axis3)
left_join(definitions(axis = "3"), axis3) |>
print(n = Inf)
left_join(definitions(axis = "3"), axis3) |>
select(section, axis, value, name, label, definition, explanation) |>
print(n = Inf)
def_axis_3 <- left_join(definitions(axis = "3"), axis3) |>
select(section, axis, value, name, label, definition, explanation)
select |>
select(
section = code_1,
name = name_4,
value = code_4,
label = label_4) |>
distinct()
definitions(axis = "4") |>
# count(section, axis) |>
print(n = Inf)
select |>
select(
section = code_1,
name = name_4,
value = code_4,
label = label_4)
select
select |>
filter(code_1 == "G")
select |>
filter(code_1 == "G") |>
select(
section = code_1,
name = name_4,
value = code_4,
label = label_4) |>
distinct()
definitions(axis = "4") |>
# count(section, axis) |>
print(n = Inf)
axis4 <- select |>
filter(code_1 == "G") |>
select(
section = code_1,
name = name_4,
value = code_4,
label = label_4) |>
distinct()
left_join(definitions(axis = "4"), axis4) |>
select(section, axis, value, name, label, definition, explanation)
def_axis_4 <- left_join(definitions(axis = "4"), axis4) |>
select(section, axis, value, name, label, definition, explanation)
definitions(axis = "5") |>
# count(section, axis) |>
print(n = Inf)
select
select |>
select(
section = code_1,
rows)
select |>
select(section = code_1, rows) |>
unnest(rows)
select |>
select(section = code_1, rows) |>
unnest(rows) |>
filter(axis == "5")
select |>
select(section = code_1, rows) |>
unnest(rows) |>
filter(axis == "5")
distinct()
definitions(axis = "5") |>
# count(section, axis) |>
print(n = Inf)
definitions(axis = "5") |>
distinct(section)
definitions(axis = "5") |>
distinct(section) |>
pull(section)
sects <- definitions(axis = "5") |>
distinct(section) |>
pull(section)
select
select |>
filter(code_1 %in% sects)
select |>
filter(code_1 %in% sects) |>
select(section = code_1, rows) |>
unnest(rows) |>
filter(axis == "5")
select |>
filter(code_1 %in% sects) |>
select(section = code_1, rows) |>
unnest(rows) |>
filter(axis == "5") |>
distinct()
axis5 <- select |>
filter(code_1 %in% sects) |>
select(section = code_1, rows) |>
unnest(rows) |>
filter(axis == "5") |>
distinct()
definitions(axis = "5")
left_join(definitions(axis = "5"), axis5) |>
select(section, axis, value, name, label, definition, explanation)
select |>
filter(code_1 %in% sects) |>
select(section = code_1, rows) |>
unnest(rows) |>
filter(axis == "5")
select |>
filter(code_1 %in% sects) |>
select(section = code_1, rows) |>
unnest(rows) |>
filter(axis == "5") |>
select(
section,
name,
value = code,
label) |>
distinct()
axis5 <- select |>
filter(code_1 %in% sects) |>
select(section = code_1, rows) |>
unnest(rows) |>
filter(axis == "5") |>
select(
section,
name,
value = code,
label) |>
distinct()
left_join(definitions(axis = "5"), axis5) |>
select(section, axis, value, name, label, definition, explanation)
definitions(axis = "5")
def_axis_5 <- left_join(definitions(axis = "5"), axis5) |>
select(section, axis, value, name, label, definition, explanation)
definitions()
vctrs::vec_rbind(def_axis_3, def_axis_4, def_axis_5)
pcs()
pcs("01")
pcs("015")
pcs("015P")
pcs("015P4")
pcs("015P4Z")
pcs("015P4ZZ")
vctrs::vec_rbind(def_axis_3, def_axis_4, def_axis_5)
vctrs::vec_rbind(def_axis_3, def_axis_4, def_axis_5) |>
select(section, axis, name, value, label, definition, explanation)
definitions <- vctrs::vec_rbind(def_axis_3, def_axis_4, def_axis_5) |>
select(section, axis, name, value, label, definition, explanation)
board |> pins::pin_write(definitions,
name = "definitions",
description = "ICD-10-PCS 2024 Definitions",
type = "qs")
board <- pins::board_folder(here::here("pkgdown/assets/pins-board"))
board |> pins::pin_write(definitions,
name = "definitions",
description = "ICD-10-PCS 2024 Definitions",
type = "qs")
board |> pins::write_board_manifest()
pins::pin_read(mount_board(), "includes")
library(procedural)
devtools::load_all(".")
